#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bubblr")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertmess(mess instance);
  partial void Updatemess(mess instance);
  partial void Deletemess(mess instance);
  partial void Insertuser(user instance);
  partial void Updateuser(user instance);
  partial void Deleteuser(user instance);
  partial void Insertpost(post instance);
  partial void Updatepost(post instance);
  partial void Deletepost(post instance);
  partial void Insertconversation(conversation instance);
  partial void Updateconversation(conversation instance);
  partial void Deleteconversation(conversation instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bubblrConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<mess> messes
	{
		get
		{
			return this.GetTable<mess>();
		}
	}
	
	public System.Data.Linq.Table<user> users
	{
		get
		{
			return this.GetTable<user>();
		}
	}
	
	public System.Data.Linq.Table<post> posts
	{
		get
		{
			return this.GetTable<post>();
		}
	}
	
	public System.Data.Linq.Table<conversation> conversations
	{
		get
		{
			return this.GetTable<conversation>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="admin_db2.mess")]
public partial class mess : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<int> _ConverId;
	
	private System.Nullable<int> _FromId;
	
	private string _Mess1;
	
	private System.Nullable<System.DateTime> _SentDate;
	
	private System.Nullable<int> _Status;
	
	private EntityRef<user> _user;
	
	private EntityRef<conversation> _conversation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConverIdChanging(System.Nullable<int> value);
    partial void OnConverIdChanged();
    partial void OnFromIdChanging(System.Nullable<int> value);
    partial void OnFromIdChanged();
    partial void OnMess1Changing(string value);
    partial void OnMess1Changed();
    partial void OnSentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public mess()
	{
		this._user = default(EntityRef<user>);
		this._conversation = default(EntityRef<conversation>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConverId", DbType="Int")]
	public System.Nullable<int> ConverId
	{
		get
		{
			return this._ConverId;
		}
		set
		{
			if ((this._ConverId != value))
			{
				if (this._conversation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnConverIdChanging(value);
				this.SendPropertyChanging();
				this._ConverId = value;
				this.SendPropertyChanged("ConverId");
				this.OnConverIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromId", DbType="Int")]
	public System.Nullable<int> FromId
	{
		get
		{
			return this._FromId;
		}
		set
		{
			if ((this._FromId != value))
			{
				if (this._user.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFromIdChanging(value);
				this.SendPropertyChanging();
				this._FromId = value;
				this.SendPropertyChanged("FromId");
				this.OnFromIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Mess", Storage="_Mess1", DbType="NVarChar(500)")]
	public string Mess1
	{
		get
		{
			return this._Mess1;
		}
		set
		{
			if ((this._Mess1 != value))
			{
				this.OnMess1Changing(value);
				this.SendPropertyChanging();
				this._Mess1 = value;
				this.SendPropertyChanged("Mess1");
				this.OnMess1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> SentDate
	{
		get
		{
			return this._SentDate;
		}
		set
		{
			if ((this._SentDate != value))
			{
				this.OnSentDateChanging(value);
				this.SendPropertyChanging();
				this._SentDate = value;
				this.SendPropertyChanged("SentDate");
				this.OnSentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_mess", Storage="_user", ThisKey="FromId", OtherKey="Id", IsForeignKey=true)]
	public user user
	{
		get
		{
			return this._user.Entity;
		}
		set
		{
			user previousValue = this._user.Entity;
			if (((previousValue != value) 
						|| (this._user.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user.Entity = null;
					previousValue.messes.Remove(this);
				}
				this._user.Entity = value;
				if ((value != null))
				{
					value.messes.Add(this);
					this._FromId = value.Id;
				}
				else
				{
					this._FromId = default(Nullable<int>);
				}
				this.SendPropertyChanged("user");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="conversation_mess", Storage="_conversation", ThisKey="ConverId", OtherKey="Id", IsForeignKey=true)]
	public conversation conversation
	{
		get
		{
			return this._conversation.Entity;
		}
		set
		{
			conversation previousValue = this._conversation.Entity;
			if (((previousValue != value) 
						|| (this._conversation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._conversation.Entity = null;
					previousValue.messes.Remove(this);
				}
				this._conversation.Entity = value;
				if ((value != null))
				{
					value.messes.Add(this);
					this._ConverId = value.Id;
				}
				else
				{
					this._ConverId = default(Nullable<int>);
				}
				this.SendPropertyChanged("conversation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="admin_db2.[user]")]
public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _City;
	
	private System.Nullable<int> _BirthYear;
	
	private string _Email;
	
	private string _Password;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private string _Token;
	
	private string _Avatar;
	
	private EntitySet<mess> _messes;
	
	private EntitySet<post> _posts;
	
	private EntitySet<conversation> _conversations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnBirthYearChanging(System.Nullable<int> value);
    partial void OnBirthYearChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    #endregion
	
	public user()
	{
		this._messes = new EntitySet<mess>(new Action<mess>(this.attach_messes), new Action<mess>(this.detach_messes));
		this._posts = new EntitySet<post>(new Action<post>(this.attach_posts), new Action<post>(this.detach_posts));
		this._conversations = new EntitySet<conversation>(new Action<conversation>(this.attach_conversations), new Action<conversation>(this.detach_conversations));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthYear", DbType="Int")]
	public System.Nullable<int> BirthYear
	{
		get
		{
			return this._BirthYear;
		}
		set
		{
			if ((this._BirthYear != value))
			{
				this.OnBirthYearChanging(value);
				this.SendPropertyChanging();
				this._BirthYear = value;
				this.SendPropertyChanged("BirthYear");
				this.OnBirthYearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="NVarChar(100)")]
	public string Token
	{
		get
		{
			return this._Token;
		}
		set
		{
			if ((this._Token != value))
			{
				this.OnTokenChanging(value);
				this.SendPropertyChanging();
				this._Token = value;
				this.SendPropertyChanged("Token");
				this.OnTokenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="NVarChar(50)")]
	public string Avatar
	{
		get
		{
			return this._Avatar;
		}
		set
		{
			if ((this._Avatar != value))
			{
				this.OnAvatarChanging(value);
				this.SendPropertyChanging();
				this._Avatar = value;
				this.SendPropertyChanged("Avatar");
				this.OnAvatarChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_mess", Storage="_messes", ThisKey="Id", OtherKey="FromId")]
	public EntitySet<mess> messes
	{
		get
		{
			return this._messes;
		}
		set
		{
			this._messes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_post", Storage="_posts", ThisKey="Id", OtherKey="UserId")]
	public EntitySet<post> posts
	{
		get
		{
			return this._posts;
		}
		set
		{
			this._posts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_conversation", Storage="_conversations", ThisKey="Id", OtherKey="Created_UserId")]
	public EntitySet<conversation> conversations
	{
		get
		{
			return this._conversations;
		}
		set
		{
			this._conversations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_messes(mess entity)
	{
		this.SendPropertyChanging();
		entity.user = this;
	}
	
	private void detach_messes(mess entity)
	{
		this.SendPropertyChanging();
		entity.user = null;
	}
	
	private void attach_posts(post entity)
	{
		this.SendPropertyChanging();
		entity.user = this;
	}
	
	private void detach_posts(post entity)
	{
		this.SendPropertyChanging();
		entity.user = null;
	}
	
	private void attach_conversations(conversation entity)
	{
		this.SendPropertyChanging();
		entity.user = this;
	}
	
	private void detach_conversations(conversation entity)
	{
		this.SendPropertyChanging();
		entity.user = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="admin_db2.post")]
public partial class post : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Picture;
	
	private string _Title;
	
	private string _ShortDesc;
	
	private string _ContDesc;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _UserId;
	
	private System.Nullable<int> _Status;
	
	private string _Location;
	
	private EntitySet<conversation> _conversations;
	
	private EntityRef<user> _user;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortDescChanging(string value);
    partial void OnShortDescChanged();
    partial void OnContDescChanging(string value);
    partial void OnContDescChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
	
	public post()
	{
		this._conversations = new EntitySet<conversation>(new Action<conversation>(this.attach_conversations), new Action<conversation>(this.detach_conversations));
		this._user = default(EntityRef<user>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(80)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(120)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDesc", DbType="NVarChar(500)")]
	public string ShortDesc
	{
		get
		{
			return this._ShortDesc;
		}
		set
		{
			if ((this._ShortDesc != value))
			{
				this.OnShortDescChanging(value);
				this.SendPropertyChanging();
				this._ShortDesc = value;
				this.SendPropertyChanged("ShortDesc");
				this.OnShortDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContDesc", DbType="NVarChar(MAX)")]
	public string ContDesc
	{
		get
		{
			return this._ContDesc;
		}
		set
		{
			if ((this._ContDesc != value))
			{
				this.OnContDescChanging(value);
				this.SendPropertyChanging();
				this._ContDesc = value;
				this.SendPropertyChanged("ContDesc");
				this.OnContDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
	public System.Nullable<int> UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._user.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="post_conversation", Storage="_conversations", ThisKey="Id", OtherKey="PostId")]
	public EntitySet<conversation> conversations
	{
		get
		{
			return this._conversations;
		}
		set
		{
			this._conversations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_post", Storage="_user", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
	public user user
	{
		get
		{
			return this._user.Entity;
		}
		set
		{
			user previousValue = this._user.Entity;
			if (((previousValue != value) 
						|| (this._user.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user.Entity = null;
					previousValue.posts.Remove(this);
				}
				this._user.Entity = value;
				if ((value != null))
				{
					value.posts.Add(this);
					this._UserId = value.Id;
				}
				else
				{
					this._UserId = default(Nullable<int>);
				}
				this.SendPropertyChanged("user");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_conversations(conversation entity)
	{
		this.SendPropertyChanging();
		entity.post = this;
	}
	
	private void detach_conversations(conversation entity)
	{
		this.SendPropertyChanging();
		entity.post = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="admin_db2.conversation")]
public partial class conversation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<int> _Created_UserId;
	
	private System.Nullable<int> _PostId;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<System.DateTime> _LastUpdate;
	
	private EntitySet<mess> _messes;
	
	private EntityRef<post> _post;
	
	private EntityRef<user> _user;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreated_UserIdChanging(System.Nullable<int> value);
    partial void OnCreated_UserIdChanged();
    partial void OnPostIdChanging(System.Nullable<int> value);
    partial void OnPostIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
	
	public conversation()
	{
		this._messes = new EntitySet<mess>(new Action<mess>(this.attach_messes), new Action<mess>(this.detach_messes));
		this._post = default(EntityRef<post>);
		this._user = default(EntityRef<user>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created_UserId", DbType="Int")]
	public System.Nullable<int> Created_UserId
	{
		get
		{
			return this._Created_UserId;
		}
		set
		{
			if ((this._Created_UserId != value))
			{
				if (this._user.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreated_UserIdChanging(value);
				this.SendPropertyChanging();
				this._Created_UserId = value;
				this.SendPropertyChanged("Created_UserId");
				this.OnCreated_UserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostId", DbType="Int")]
	public System.Nullable<int> PostId
	{
		get
		{
			return this._PostId;
		}
		set
		{
			if ((this._PostId != value))
			{
				if (this._post.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPostIdChanging(value);
				this.SendPropertyChanging();
				this._PostId = value;
				this.SendPropertyChanged("PostId");
				this.OnPostIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="conversation_mess", Storage="_messes", ThisKey="Id", OtherKey="ConverId")]
	public EntitySet<mess> messes
	{
		get
		{
			return this._messes;
		}
		set
		{
			this._messes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="post_conversation", Storage="_post", ThisKey="PostId", OtherKey="Id", IsForeignKey=true)]
	public post post
	{
		get
		{
			return this._post.Entity;
		}
		set
		{
			post previousValue = this._post.Entity;
			if (((previousValue != value) 
						|| (this._post.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._post.Entity = null;
					previousValue.conversations.Remove(this);
				}
				this._post.Entity = value;
				if ((value != null))
				{
					value.conversations.Add(this);
					this._PostId = value.Id;
				}
				else
				{
					this._PostId = default(Nullable<int>);
				}
				this.SendPropertyChanged("post");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_conversation", Storage="_user", ThisKey="Created_UserId", OtherKey="Id", IsForeignKey=true)]
	public user user
	{
		get
		{
			return this._user.Entity;
		}
		set
		{
			user previousValue = this._user.Entity;
			if (((previousValue != value) 
						|| (this._user.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user.Entity = null;
					previousValue.conversations.Remove(this);
				}
				this._user.Entity = value;
				if ((value != null))
				{
					value.conversations.Add(this);
					this._Created_UserId = value.Id;
				}
				else
				{
					this._Created_UserId = default(Nullable<int>);
				}
				this.SendPropertyChanged("user");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_messes(mess entity)
	{
		this.SendPropertyChanging();
		entity.conversation = this;
	}
	
	private void detach_messes(mess entity)
	{
		this.SendPropertyChanging();
		entity.conversation = null;
	}
}
#pragma warning restore 1591
